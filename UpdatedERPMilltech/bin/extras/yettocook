import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class SwingAuthDemo {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LoginFrame loginFrame = new LoginFrame();
            loginFrame.setVisible(true);
        });
    }
}

class LoginFrame extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;

    public LoginFrame() {
        setTitle("Login");
        setSize(300, 150);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(3, 2));
        JLabel usernameLabel = new JLabel("Username:");
        JLabel passwordLabel = new JLabel("Password:");
        usernameField = new JTextField();
        passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");

        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(new JLabel()); // Empty label for spacing
        panel.add(loginButton);

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] password = passwordField.getPassword();

                // Authenticate user
                User authenticatedUser = AuthenticationService.authenticateUser(username, new String(password));

                if (authenticatedUser != null) {
                    // Successful login
                    SessionManager.getInstance().setCurrentUser(authenticatedUser);

                    // Open the main application window
                    openMainApplication();
                    dispose(); // Close the login window
                } else {
                    // Failed login
                    JOptionPane.showMessageDialog(LoginFrame.this, "Invalid credentials. Please try again.");
                    usernameField.setText("");
                    passwordField.setText("");
                }
            }
        });

        add(panel);
    }

    private void openMainApplication() {
        MainFrame mainFrame = new MainFrame();
        mainFrame.setVisible(true);
    }
}

class MainFrame extends JFrame {
    public MainFrame() {
        setTitle("Main Application");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Check if the user is logged in
        SessionManager sessionManager = SessionManager.getInstance();
        if (!sessionManager.isAuthenticated()) {
            // Redirect to the login screen or show an error message
            JOptionPane.showMessageDialog(this, "You must log in first.");
            return;
        }

        // Access control based on user role
        User currentUser = sessionManager.getCurrentUser();
        if ("admin".equals(currentUser.getRole())) {
            // Add admin-specific components and functionality here
            JLabel label = new JLabel("Welcome, Admin!");
            add(label);
        } else if ("user".equals(currentUser.getRole())) {
            // Add user-specific components and functionality here
            JLabel label = new JLabel("Welcome, User!");
            add(label);
        }
    }
}

class AuthenticationService {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_db_name";
    private static final String DB_USER = "your_db_username";
    private static final String DB_PASSWORD = "your_db_password";

    public static User authenticateUser(String username, String password) {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);

            String query = "SELECT * FROM users WHERE username = ? AND password = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, username);
            statement.setString(2, password);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                String role = resultSet.getString("role");
                return new User(username, password, role);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return null;
    }
}

class SessionManager {
    private static SessionManager instance;
    private User currentUser;

    private SessionManager() {
    }

    public static SessionManager getInstance() {
        if (instance == null) {
            instance = new SessionManager();
        }
        return instance;
    }

    public void setCurrentUser(User user) {
        currentUser = user;
    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void logout() {
        currentUser = null;
    }

    public boolean isAuthenticated() {
        return currentUser != null;
    }
}

class User {
    private String username;
    private String password;
    private String role;

    public User(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getRole() {
        return role;
    }
}

////////////////////////////////////////

@Override
		public Object getValueAt(Object node, int column) {
			if (node instanceof DefaultMutableTreeTableNode) {
				DefaultMutableTreeTableNode treeNode = (DefaultMutableTreeTableNode) node;
				Object userObject = treeNode.getUserObject();
				if (userObject instanceof TblJob) {
					TblJob job = (TblJob) userObject;
					if (column == 5) {
						return job.getJobID();
					} else if (column == 1) {
						return job.getJobQty();
					} else if (column == 2) {
						return job.getJobStateName();
					}
				} else if (userObject instanceof TblJobDetails) {
					TblJobDetails jobDetail = (TblJobDetails) userObject;
					if (column == 0) {
						return jobDetail.getJobDetailID();
					} else if (column == 1) {
						return jobDetail.getJobQty();
					}
				}
			}
			return null;
		}


	
	
	///////////////////////////////////////////////////////
	
	
	
	
	
	
	
	// QUERY FOR UNPLANNED JOBS 
	
	final String fetchUnplannedJobsQuery = """
				SELECT ROW_NUMBER() OVER (ORDER BY bomRoute.EndItemStockID ASC) AS "SerialNo", bomRoute.BOMRouteID AS BomRouteID,  stock1.Stock_Code AS EndItemName, stock2.Stock_Code AS InfeedItemName, mac.MachineName AS MachineName,
				stock2.Stock_QuantityInHand AS QuantityStock
				FROM tbl_Job job
				RIGHT JOIN tbl_Bom_Route bomRoute ON job.BomRouteID = bomRoute.BOMRouteID
				INNER JOIN tbl_Stock_List stock1 ON bomRoute.EndItemStockID = stock1.Stock_ID
				INNER JOIN tbl_Stock_List stock2 ON bomRoute.InFeedItemStockID = stock2.Stock_ID
				INNER JOIN tbl_Machines mac ON bomRoute.MachineID = mac.MachineID
				WHERE job.BomRouteID IS NULL
				ORDER BY bomRoute.EndItemStockID ASC
				""";
	/////////////////////////////////////////////////////
